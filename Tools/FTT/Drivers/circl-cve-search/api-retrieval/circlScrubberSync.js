//const exec = require('child_process');
const parse = require('node-html-parser').parse;
const exec = require('child_process').execSync;
const fs = require('fs');

/*
exec('curl https://www.npmjs.com/advisories', (error, stdout, stderr) => {
if (error) {
console.error(`exec error: ${error}`);
return;
}
//console.log(`stdout: ${stdout}`);
const root = parse(stdout)
console.log(root.firstChild.structure);
});
*/
var path1 = 'http://cve.circl.lu/api/browse/'
var path2 = 'http://cve.circl.lu/api/search/'
var v;
var p;
var j;
var vulnerabilities = [];




//browse for vendors
var vendors = JSON.parse(exec('curl ' + path1)).vendor
vendors = vendors.filter(vendor => vendor.includes("js"));
console.log(vendors);

//browse for products offer by vendors
for (v = 0; v < vendors.length; v++) { /*vendors.length*/
  var product_data = JSON.parse(exec('curl ' + path1 + vendors[v]));

  //search for specific product by a vendor

  for(p = 0; p < product_data.product.length; p++){
    console.log('curl ' + path2 + product_data.vendor + "/" + product_data.product[p]);
    var data = JSON.parse(exec('curl ' + path2 + product_data.vendor + "/" + product_data.product[p]));
    console.log(data);
    if (data[0]) { // TODO: clean this up
      if (data[0].vulnerable_configuration[0].includes(".js")) {
        //fs.appendFile('output_1.txt', '\n\n'+stdout+'\n\n-------------------------------------------------------------------------------------------------------------------------', (err) => { if (err) throw err; });
        vulnerabilities.push(data[0]);
      }
    }
  }
}

fs.appendFile('output_1.json', JSON.stringify({vulnerabilities: vulnerabilities}), (err) => { if (err) throw err; });
